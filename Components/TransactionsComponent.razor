@inject IDbContextFactory<FinancialOrganizerDbContext> dbContextFactory

<div class="table-container">
    <table>
        <thead>
            <tr class="table-title">
                <th colspan="5">Transactions</th>
            </tr>
            <tr class="table-columns-names">
                <th>Product</th>
                <th>Price</th>
                <th>Category</th>
                <th>Payment Method</th>
                <th>Date and Time</th>
            </tr>
        </thead>
        <tbody>
            @if (transactions is not null)
            {
                @foreach (var transaction in transactions)
                {
                    <tr>
                        <td>@transaction.ProductName</td>
                        <td>R$ @transaction.Amount</td>
                        <td>@transaction.Category?.CategoryName</td>
                        <td>@transaction.PaymentMethod?.PaymentMethodType - @transaction.PaymentMethod?.PaymentMethodIssuer</td>
                        <td>@transaction.PurchaseDateAndTime</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5">No transactions found</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Transactions>? transactions;

    protected override async Task OnInitializedAsync()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            transactions = await dbContext.Transactions
                .Include(transaction => transaction.Category)
                .Include(transaction => transaction.PaymentMethod)
                .ToListAsync();
        }
    }
}